name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      run: npm run build:mac
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false

    - name: Build for Linux
      if: matrix.os == 'ubuntu-latest'
      run: npm run build:linux

    - name: Build for Windows
      if: matrix.os == 'windows-latest'
      run: |
        npm install --global windows-build-tools || true
        npm run build:win || echo "Windows build may require additional setup"

    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: dist/*.dmg

    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          dist/*.AppImage
          dist/*.deb

    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: dist/*.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Digital Signage App ${{ github.ref_name }}
        body: |
          ## Changes in ${{ github.ref_name }}
          
          Auto-generated release from GitHub Actions.
          
          ### Downloads
          - **macOS**: Download the `.dmg` file
          - **Linux**: Download the `.AppImage` or `.deb` file
          - **Windows**: Download the `.exe` file
        draft: false
        prerelease: false

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macos-build/*.dmg
        asset_name: digital-signage-app-${{ github.ref_name }}-mac.dmg
        asset_content_type: application/octet-stream

    - name: Upload Linux AppImage Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-build/*.AppImage
        asset_name: digital-signage-app-${{ github.ref_name }}-linux.AppImage
        asset_content_type: application/octet-stream

    - name: Upload Linux DEB Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-build/*.deb
        asset_name: digital-signage-app-${{ github.ref_name }}-linux.deb
        asset_content_type: application/octet-stream

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./windows-build/*.exe
        asset_name: digital-signage-app-${{ github.ref_name }}-windows.exe
        asset_content_type: application/octet-stream